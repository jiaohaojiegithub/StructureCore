// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OTTMRPDB.Models;

namespace OTTMRPDB.Migrations
{
    [DbContext(typeof(erp_baseContext))]
    partial class erp_baseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseApiLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ActionParams")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Exception")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExecuteEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExecuteStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("HttpRequestHeaders")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IsException");

                    b.Property<string>("Response")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_ApiLog");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ColorName")
                        .HasColumnName("colorName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ColorId")
                        .IsUnique()
                        .HasName("unique_colorId")
                        .HasFilter("[colorId] IS NOT NULL");

                    b.ToTable("HM_Base_Color");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseDepotid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DepotId")
                        .HasColumnName("depotId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DepotName")
                        .HasColumnName("depotName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DepotId")
                        .IsUnique()
                        .HasName("unique_depotId")
                        .HasFilter("[depotId] IS NOT NULL");

                    b.ToTable("HM_Base_depotid");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseFabric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AfterfinishDays")
                        .HasColumnName("afterfinishDays");

                    b.Property<double?>("ArrivalDays");

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double?>("ColoringDays")
                        .HasColumnName("coloringDays");

                    b.Property<string>("Component")
                        .HasColumnName("component")
                        .HasMaxLength(3000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricClass")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FabricName")
                        .HasColumnName("fabric_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("GoodsDays")
                        .HasColumnName("goodsDays");

                    b.Property<decimal?>("GoodsPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("GramWeight")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Pnremark")
                        .HasColumnName("PNRemark")
                        .HasColumnType("text");

                    b.Property<double?>("PrintingDays")
                        .HasColumnName("printingDays");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Shrinkage")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StartQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("SureDays")
                        .HasColumnName("sureDays");

                    b.Property<double?>("UseWidth")
                        .HasColumnName("use_width");

                    b.Property<string>("UseWidthUnit")
                        .HasColumnName("use_width_unit")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ValidWidth")
                        .HasColumnName("valid_width")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ValidWidthUnit")
                        .HasColumnName("valid_width_unit")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Fabric");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseInStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("BudgetDetailId");

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnName("confirmDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("InStoreDate")
                        .HasColumnName("inStoreDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InStoreId")
                        .HasColumnName("inStoreId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InStoreUser")
                        .HasColumnName("inStoreUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReceiveId")
                        .HasColumnName("receiveId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Shnum")
                        .HasColumnName("shnum");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .HasColumnName("step");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("InStoreId")
                        .IsUnique()
                        .HasName("unique_inStoreId")
                        .HasFilter("[inStoreId] IS NOT NULL");

                    b.ToTable("HM_Base_InStore");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseInStoresub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("InStoreId")
                        .HasColumnName("inStoreId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ReceivesubId")
                        .HasColumnName("receivesubId");

                    b.Property<string>("RequestId")
                        .HasColumnName("requestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Shnum")
                        .HasColumnName("shnum");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_InStoresub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PassWord")
                        .HasColumnName("passWord")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int?>("RoleId")
                        .HasColumnName("roleId");

                    b.Property<string>("RoleIds")
                        .HasColumnName("roleIds")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Uid")
                        .HasColumnName("uid")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("unique_userId")
                        .HasFilter("[userId] IS NOT NULL");

                    b.ToTable("HM_Base_Manager");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MenuName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId")
                        .HasColumnName("parentId");

                    b.Property<int?>("Sort")
                        .HasColumnName("sort");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Menu");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseOutStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Designer")
                        .HasColumnName("designer")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("InStoreId")
                        .HasColumnName("inStoreId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Master")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("OutStoreDate")
                        .HasColumnName("outStoreDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OutStoreId")
                        .HasColumnName("outStoreId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OutStoreUser")
                        .HasColumnName("outStoreUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RequestId")
                        .HasColumnName("requestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .HasColumnName("step");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("TechnicianId")
                        .HasColumnName("technicianID");

                    b.Property<string>("UseName")
                        .HasColumnName("useName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("OutStoreId")
                        .IsUnique()
                        .HasName("unique_outStoreId")
                        .HasFilter("[outStoreId] IS NOT NULL");

                    b.ToTable("HM_Base_OutStore");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseOutStoresub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("InStoresubId")
                        .HasColumnName("inStoresubId");

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("OutStoreId")
                        .HasColumnName("outStoreId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_OutStoresub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBasePurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AfterfinishDays")
                        .HasColumnName("afterfinishDays");

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("BudgetDetailId");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("checkDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckUser")
                        .HasColumnName("checkUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<double?>("ColoringDays")
                        .HasColumnName("coloringDays");

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ExpectDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("GoodsDays")
                        .HasColumnName("goodsDays");

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<double?>("PrintingDays")
                        .HasColumnName("printingDays");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnName("purchaseOrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReComment")
                        .HasColumnName("reComment")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnName("scheduleDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .HasColumnName("step");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnName("submitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitUser")
                        .HasColumnName("submitUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SumRequestId")
                        .HasColumnName("sumRequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("SureDays")
                        .HasColumnName("sureDays");

                    b.Property<int?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasDefaultValueSql("((2))");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasName("unique_purchaseOrderId")
                        .HasFilter("[purchaseOrderId] IS NOT NULL");

                    b.ToTable("HM_Base_PurchaseOrder");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBasePurchaseOrdersub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnName("purchaseOrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SumRequestsubId");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_PurchaseOrdersub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseQuarterBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("QuarterBudget")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("QuarterCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("QuarterName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_QuarterBudget");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseQuarterBudgetDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuarterCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("QuarterName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RelateId")
                        .HasColumnName("relateId");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_QuarterBudgetDetail");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseReceive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArriveDate")
                        .HasColumnName("arriveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("BudgetDetailId");

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Fhnum")
                        .HasColumnName("fhnum");

                    b.Property<DateTime?>("GetDate")
                        .HasColumnName("getDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GetUser")
                        .HasColumnName("getUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int?>("IsPay")
                        .HasColumnName("isPay");

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReComment")
                        .HasColumnName("reComment")
                        .HasMaxLength(200);

                    b.Property<string>("RealSendDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReceiveId")
                        .HasColumnName("receiveId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .HasColumnName("step");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SupplierSureId")
                        .HasColumnName("supplierSureId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ReceiveId")
                        .IsUnique()
                        .HasName("unique_receiveId")
                        .HasFilter("[receiveId] IS NOT NULL");

                    b.ToTable("HM_Base_Receive");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseReceivesub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ColorIsRight")
                        .HasColumnName("colorIsRight");

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("FeelIsRight")
                        .HasColumnName("feelIsRight");

                    b.Property<int?>("Fhnum")
                        .HasColumnName("fhnum");

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReceiveId")
                        .HasColumnName("receiveId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SupplierSuresubId")
                        .HasColumnName("supplierSuresubId");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Receivesub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("checkDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckUser")
                        .HasColumnName("checkUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ExpectDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricAttribute")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("FabricPart")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasColumnName("imageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReComment")
                        .HasColumnName("reComment")
                        .HasMaxLength(200);

                    b.Property<string>("RequestId")
                        .HasColumnName("requestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SampleSeason")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("step")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnName("submitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitUser")
                        .HasColumnName("submitUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasName("unique_requestId")
                        .HasFilter("[requestId] IS NOT NULL");

                    b.ToTable("HM_Base_Request");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .HasColumnName("roleName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Role");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseRoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MenuId");

                    b.Property<int?>("RoleId");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_RoleMenu");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DepotId")
                        .HasColumnName("depotId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Kpkcnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kpkcnum")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Sjkcnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sjkcnum")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Stock");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseStocksub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal?>("Cknum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cknum")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DepotId")
                        .HasColumnName("depotId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Innum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("innum")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Outnum")
                        .HasColumnName("outnum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RelateId")
                        .HasColumnName("relateId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RequestId")
                        .HasColumnName("requestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Rknum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rknum")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Sfnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sfnum")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Stocksub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseStocksubs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Crdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("crdate")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NewrequestId")
                        .HasColumnName("newrequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NewstyleId")
                        .HasColumnName("newstyleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RequestId")
                        .HasColumnName("requestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Uid")
                        .HasColumnName("uid")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Stocksubs");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal?>("Cknum")
                        .HasColumnName("cknum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DepotId")
                        .HasColumnName("depotId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Rknum")
                        .HasColumnName("rknum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Store");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseStoresub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cknum")
                        .HasColumnName("cknum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("RequestId")
                        .HasColumnName("requestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Rknum")
                        .HasColumnName("rknum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StoreId")
                        .HasColumnName("storeId");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("UseStatus")
                        .HasColumnName("useStatus");

                    b.HasKey("Id");

                    b.ToTable("HM_Base_Storesub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Band")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Designer")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Master")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Season")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("StyleName")
                        .HasColumnName("styleName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Year")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("StyleId")
                        .IsUnique()
                        .HasName("unique_styleId")
                        .HasFilter("[styleId] IS NOT NULL");

                    b.ToTable("HM_Base_Style");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseSumRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("checkDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CheckUser")
                        .HasColumnName("checkUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ExpectDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReComment")
                        .HasColumnName("reComment")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SampleSeason")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .HasColumnName("step");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnName("submitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubmitUser")
                        .HasColumnName("submitUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SumRequestId")
                        .HasColumnName("sumRequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierComment")
                        .HasColumnName("supplierComment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("SumRequestId")
                        .IsUnique()
                        .HasName("unique_sumRequestId")
                        .HasFilter("[sumRequestId] IS NOT NULL");

                    b.ToTable("HM_Base_SumRequest");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseSumRequestsub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnName("requestDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RequestId")
                        .HasColumnName("requestId");

                    b.Property<string>("RequestUser")
                        .HasColumnName("requestUser")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SumRequestId")
                        .HasColumnName("sumRequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_SumRequestsub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Linkman")
                        .HasColumnName("linkman")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SupplierName")
                        .HasColumnName("supplier_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Tel")
                        .HasColumnName("tel")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("SupplierCode")
                        .IsUnique()
                        .HasName("unique_supplier_code")
                        .HasFilter("[supplier_code] IS NOT NULL");

                    b.ToTable("HM_Base_Supplier");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseSupplierSure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("BudgetDetailId");

                    b.Property<string>("CheckDate")
                        .HasColumnName("checkDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CheckUser")
                        .HasColumnName("checkUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ExpectDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ExpressName")
                        .HasColumnName("expressName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ExpressNum")
                        .HasColumnName("expressNum")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PurchaseOrderId")
                        .HasColumnName("purchaseOrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ReComment")
                        .HasColumnName("reComment")
                        .HasMaxLength(200);

                    b.Property<string>("RealSendDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnName("sendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SendUser")
                        .HasColumnName("sendUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Step")
                        .HasColumnName("step");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SupplierSureId")
                        .HasColumnName("supplierSureId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("SupplierSureId")
                        .IsUnique()
                        .HasName("unique_supplierSureId")
                        .HasFilter("[supplierSureId] IS NOT NULL");

                    b.ToTable("HM_Base_SupplierSure");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseSupplierSuresub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorId")
                        .HasColumnName("colorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ColorIsRight")
                        .HasColumnName("colorIsRight");

                    b.Property<string>("FabricCode")
                        .HasColumnName("fabric_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("FeelIsRight")
                        .HasColumnName("feelIsRight");

                    b.Property<decimal?>("Num")
                        .HasColumnName("num")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("PurchaseOrdersubId")
                        .HasColumnName("purchaseOrdersubId");

                    b.Property<decimal?>("SamplePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Specification")
                        .HasColumnName("specification")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Sum")
                        .HasColumnName("sum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierColor")
                        .HasColumnName("supplierColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierSureId")
                        .HasColumnName("supplierSureId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_SupplierSuresub");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseTechnician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TechnicianID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Technicianname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TechnicianId");

                    b.ToTable("HM_Base_Technician");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Uid")
                        .HasColumnName("uid")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasName("unique_uid")
                        .HasFilter("[uid] IS NOT NULL");

                    b.ToTable("HM_Base_Token");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .HasColumnName("avatarUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gender")
                        .HasColumnName("gender");

                    b.Property<int?>("IsSure")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isSure")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Mobile")
                        .HasColumnName("mobile")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("OpenId")
                        .HasColumnName("openId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Realname")
                        .HasColumnName("realname")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SupplierCode")
                        .HasColumnName("supplier_code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnName("uid")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UnionId")
                        .HasColumnName("unionId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("HM_Base__id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasName("unique_uid");

                    b.ToTable("HM_Base_User");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmBaseUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IsSure")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isSure")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("RoleId");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnName("type");

                    b.Property<string>("Uid")
                        .HasColumnName("uid")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Base_UserRole");
                });

            modelBuilder.Entity("OTTMRPDB.Models.HmMaterielStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BrandId")
                        .HasColumnName("brandId")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CompanyColorId")
                        .HasColumnName("companyColorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DepotId")
                        .HasColumnName("depotId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("KNum")
                        .HasColumnName("k_num");

                    b.Property<string>("MaterialCode")
                        .HasColumnName("materialCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("PNum")
                        .HasColumnName("p_num");

                    b.Property<string>("Size")
                        .HasColumnName("size")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("StyleId")
                        .HasColumnName("styleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierColorId")
                        .HasColumnName("supplierColorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("HM_Materiel_Stock");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrAppFnScheme", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FScheme")
                        .HasColumnName("F_Scheme")
                        .HasColumnType("text");

                    b.HasKey("FId")
                        .HasName("PK_LR_App_FunctionScheme");

                    b.ToTable("LR_App_FnScheme");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrAppFunction", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCodeId")
                        .HasColumnName("F_CodeId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFormId")
                        .HasColumnName("F_FormId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FIcon")
                        .HasColumnName("F_Icon")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeId")
                        .HasColumnName("F_SchemeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FType")
                        .HasColumnName("F_Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId");

                    b.ToTable("LR_App_Function");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseArea", b =>
                {
                    b.Property<string>("FAreaId")
                        .HasColumnName("F_AreaId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAreaCode")
                        .HasColumnName("F_AreaCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAreaName")
                        .HasColumnName("F_AreaName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FLayer")
                        .HasColumnName("F_Layer");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQuickQuery")
                        .HasColumnName("F_QuickQuery")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FSimpleSpelling")
                        .HasColumnName("F_SimpleSpelling")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FAreaId")
                        .HasName("PK_BASE_AREA")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FCreateDate")
                        .HasName("PK_BASE_AREA_CreateDate");

                    b.ToTable("LR_Base_Area");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseAuthorize", b =>
                {
                    b.Property<string>("FAuthorizeId")
                        .HasColumnName("F_AuthorizeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FItemId")
                        .HasColumnName("F_ItemId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FItemType")
                        .HasColumnName("F_ItemType");

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FObjectType")
                        .HasColumnName("F_ObjectType");

                    b.HasKey("FAuthorizeId")
                        .HasName("PK_BASE_AUTHORIZE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_Authorize");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseCodeRule", b =>
                {
                    b.Property<string>("FRuleId")
                        .HasColumnName("F_RuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCurrentNumber")
                        .HasColumnName("F_CurrentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FRuleFormatJson")
                        .HasColumnName("F_RuleFormatJson")
                        .HasColumnType("text");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FRuleId")
                        .HasName("PK_CODE_RULE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_CodeRule");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseCodeRuleSeed", b =>
                {
                    b.Property<string>("FRuleSeedId")
                        .HasColumnName("F_RuleSeedId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FRuleId")
                        .HasColumnName("F_RuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSeedValue")
                        .HasColumnName("F_SeedValue");

                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FRuleSeedId")
                        .HasName("PK_CODE_RULESEED")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_CodeRuleSeed");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseCompany", b =>
                {
                    b.Property<string>("FCompanyId")
                        .HasColumnName("F_CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAddress")
                        .HasColumnName("F_Address")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FBusinessScope")
                        .HasColumnName("F_BusinessScope")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FCategory")
                        .HasColumnName("F_Category");

                    b.Property<string>("FCityId")
                        .HasColumnName("F_CityId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCountyId")
                        .HasColumnName("F_CountyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmail")
                        .HasColumnName("F_Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFax")
                        .HasColumnName("F_Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FFoundedTime")
                        .HasColumnName("F_FoundedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FInnerPhone")
                        .HasColumnName("F_InnerPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FManager")
                        .HasColumnName("F_Manager")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNature")
                        .HasColumnName("F_Nature")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOuterPhone")
                        .HasColumnName("F_OuterPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPostalcode")
                        .HasColumnName("F_Postalcode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProvinceId")
                        .HasColumnName("F_ProvinceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FShortName")
                        .HasColumnName("F_ShortName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FWebAddress")
                        .HasColumnName("F_WebAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FCompanyId")
                        .HasName("PK_BASE_ORGANIZE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_Company");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseCustmerQuery", b =>
                {
                    b.Property<string>("FCustmerQueryId")
                        .HasColumnName("F_CustmerQueryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFormula")
                        .HasColumnName("F_Formula")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FModuleId")
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleUrl")
                        .IsRequired()
                        .HasColumnName("F_ModuleUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnName("F_Name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FQueryJson")
                        .HasColumnName("F_QueryJson")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FCustmerQueryId")
                        .HasName("PK_LR_CustmerQuery_Main");

                    b.ToTable("LR_Base_CustmerQuery");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDataCondition", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDataAuthorizeRelationId")
                        .HasColumnName("F_DataAuthorizeRelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFieldId")
                        .HasColumnName("F_FieldId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FFieldName")
                        .HasColumnName("F_FieldName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("FFieldType")
                        .HasColumnName("F_FieldType");

                    b.Property<string>("FFiledValue")
                        .HasColumnName("F_FiledValue")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FFiledValueType")
                        .HasColumnName("F_FiledValueType");

                    b.Property<int?>("FSort")
                        .HasColumnName("F_Sort");

                    b.Property<int?>("FSymbol")
                        .HasColumnName("F_Symbol");

                    b.Property<string>("FSymbolName")
                        .HasColumnName("F_SymbolName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_LR_Base_DataAuthorizeCondition");

                    b.ToTable("LR_Base_DataCondition");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDataItem", b =>
                {
                    b.Property<string>("FItemId")
                        .HasColumnName("F_ItemId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FIsNav")
                        .HasColumnName("F_IsNav");

                    b.Property<int?>("FIsTree")
                        .HasColumnName("F_IsTree");

                    b.Property<string>("FItemCode")
                        .HasColumnName("F_ItemCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FItemName")
                        .HasColumnName("F_ItemName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FItemId")
                        .HasName("PK_BASE_DATAITEM")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_DataItem");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDataItemDetail", b =>
                {
                    b.Property<string>("FItemDetailId")
                        .HasColumnName("F_ItemDetailId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FIsDefault")
                        .HasColumnName("F_IsDefault");

                    b.Property<string>("FItemCode")
                        .HasColumnName("F_ItemCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FItemId")
                        .HasColumnName("F_ItemId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FItemName")
                        .HasColumnName("F_ItemName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FItemValue")
                        .HasColumnName("F_ItemValue")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQuickQuery")
                        .HasColumnName("F_QuickQuery")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FSimpleSpelling")
                        .HasColumnName("F_SimpleSpelling")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FItemDetailId")
                        .HasName("PK_BASE_DATAITEMDETAIL")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_DataItemDetail");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDataRelation", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFormula")
                        .HasColumnName("F_Formula")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FInterfaceId")
                        .HasColumnName("F_InterfaceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FObjectType")
                        .HasColumnName("F_ObjectType");

                    b.HasKey("FId")
                        .HasName("PK_LR_Base_AuthorizeData");

                    b.ToTable("LR_Base_DataRelation");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDatabaseLink", b =>
                {
                    b.Property<string>("FDatabaseLinkId")
                        .HasColumnName("F_DatabaseLinkId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDbConnection")
                        .HasColumnName("F_DbConnection")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FDbType")
                        .HasColumnName("F_DbType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDbalias")
                        .HasColumnName("F_DBAlias")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDbname")
                        .HasColumnName("F_DBName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FDesencrypt")
                        .HasColumnName("F_DESEncrypt");

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FServerAddress")
                        .HasColumnName("F_ServerAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FVersion")
                        .HasColumnName("F_Version")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FDatabaseLinkId")
                        .HasName("PK_BASE_DATABASELINK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_DatabaseLink");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDbDraft", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContent")
                        .HasColumnName("F_Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnName("F_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FRemark")
                        .HasColumnName("F_Remark")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK__DraftMan__2C6EC723662B2B3B");

                    b.ToTable("LR_Base_DbDraft");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDbField", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDataType")
                        .IsRequired()
                        .HasColumnName("F_DataType")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("FLength")
                        .HasColumnName("F_Length");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnName("F_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FRemark")
                        .HasColumnName("F_Remark")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK__CommonFi__2C6EC723625A9A57");

                    b.ToTable("LR_Base_DbField");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseDepartment", b =>
                {
                    b.Property<string>("FDepartmentId")
                        .HasColumnName("F_DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyId")
                        .HasColumnName("F_CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmail")
                        .HasColumnName("F_Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFax")
                        .HasColumnName("F_Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FInnerPhone")
                        .HasColumnName("F_InnerPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FManager")
                        .HasColumnName("F_Manager")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNature")
                        .HasColumnName("F_Nature")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOuterPhone")
                        .HasColumnName("F_OuterPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FShortName")
                        .HasColumnName("F_ShortName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FDepartmentId")
                        .HasName("PK_BASE_DEPARTMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_Department");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseFilterIp", b =>
                {
                    b.Property<string>("FFilterIpid")
                        .HasColumnName("F_FilterIPId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FIplimit")
                        .HasColumnName("F_IPLimit")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectType")
                        .HasColumnName("F_ObjectType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<int?>("FType")
                        .HasColumnName("F_Type");

                    b.Property<int?>("FVisitType")
                        .HasColumnName("F_VisitType");

                    b.HasKey("FFilterIpid")
                        .HasName("PK_BASE_FILTERIP")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_FilterIP");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseFilterTime", b =>
                {
                    b.Property<string>("FFilterTimeId")
                        .HasColumnName("F_FilterTimeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectType")
                        .HasColumnName("F_ObjectType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<int?>("FVisitType")
                        .HasColumnName("F_VisitType");

                    b.Property<string>("FWeekDay1")
                        .HasColumnName("F_WeekDay1")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FWeekDay2")
                        .HasColumnName("F_WeekDay2")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FWeekDay3")
                        .HasColumnName("F_WeekDay3")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FWeekDay4")
                        .HasColumnName("F_WeekDay4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FWeekDay5")
                        .HasColumnName("F_WeekDay5")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FWeekDay6")
                        .HasColumnName("F_WeekDay6")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FWeekDay7")
                        .HasColumnName("F_WeekDay7")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FFilterTimeId")
                        .HasName("PK_BASE_FILTERTIME")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_FilterTime");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseInterface", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAddress")
                        .HasColumnName("F_Address")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFieldsJson")
                        .HasColumnName("F_FieldsJson")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("FId");

                    b.ToTable("LR_Base_Interface");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseLog", b =>
                {
                    b.Property<string>("FLogId")
                        .HasColumnName("F_LogId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FBrowser")
                        .HasColumnName("F_Browser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FCategoryId")
                        .HasColumnName("F_CategoryId");

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FExecuteResult")
                        .HasColumnName("F_ExecuteResult");

                    b.Property<string>("FExecuteResultJson")
                        .HasColumnName("F_ExecuteResultJson")
                        .HasColumnType("text");

                    b.Property<string>("FHost")
                        .HasColumnName("F_Host")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FIpaddress")
                        .HasColumnName("F_IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FIpaddressName")
                        .HasColumnName("F_IPAddressName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FModule")
                        .HasColumnName("F_Module")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOperateAccount")
                        .HasColumnName("F_OperateAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FOperateTime")
                        .HasColumnName("F_OperateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FOperateType")
                        .HasColumnName("F_OperateType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOperateTypeId")
                        .HasColumnName("F_OperateTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOperateUserId")
                        .HasColumnName("F_OperateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSourceContentJson")
                        .HasColumnName("F_SourceContentJson")
                        .HasColumnType("text");

                    b.Property<string>("FSourceObjectId")
                        .HasColumnName("F_SourceObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FLogId")
                        .HasName("PK_BASE_LOG")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_Log");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseModule", b =>
                {
                    b.Property<string>("FModuleId")
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FAllowDelete")
                        .HasColumnName("F_AllowDelete");

                    b.Property<int?>("FAllowEdit")
                        .HasColumnName("F_AllowEdit");

                    b.Property<int?>("FAllowExpand")
                        .HasColumnName("F_AllowExpand");

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FIcon")
                        .HasColumnName("F_Icon")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FIsMenu")
                        .HasColumnName("F_IsMenu");

                    b.Property<int?>("FIsPublic")
                        .HasColumnName("F_IsPublic");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .IsRequired()
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FTarget")
                        .HasColumnName("F_Target")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("FUrlAddress")
                        .HasColumnName("F_UrlAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FModuleId")
                        .HasName("PK_BASE_MODULE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_Module");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseModuleButton", b =>
                {
                    b.Property<string>("FModuleButtonId")
                        .HasColumnName("F_ModuleButtonId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FActionAddress")
                        .HasColumnName("F_ActionAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FIcon")
                        .HasColumnName("F_Icon")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleId")
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FModuleButtonId")
                        .HasName("PK_BASE_MODULEBUTTON")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FModuleId")
                        .HasName("SY_F_ModuleId");

                    b.ToTable("LR_Base_ModuleButton");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseModuleColumn", b =>
                {
                    b.Property<string>("FModuleColumnId")
                        .HasColumnName("F_ModuleColumnId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleId")
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FModuleColumnId")
                        .HasName("PK_BASE_MODULECOLUMN")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FModuleId")
                        .HasName("SY_F_ModuleId");

                    b.ToTable("LR_Base_ModuleColumn");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBasePost", b =>
                {
                    b.Property<string>("FPostId")
                        .HasColumnName("F_PostId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyId")
                        .IsRequired()
                        .HasColumnName("F_CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDepartmentId")
                        .HasColumnName("F_DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .IsRequired()
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnName("F_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .IsRequired()
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FPostId");

                    b.ToTable("LR_Base_Post");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseRole", b =>
                {
                    b.Property<string>("FRoleId")
                        .HasColumnName("F_RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCategory")
                        .HasColumnName("F_Category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FRoleId")
                        .HasName("PK_BASE_ROLE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_Role");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseUser", b =>
                {
                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAccount")
                        .HasColumnName("F_Account")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FAllowEndTime")
                        .HasColumnName("F_AllowEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FAllowStartTime")
                        .HasColumnName("F_AllowStartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FAnswerQuestion")
                        .HasColumnName("F_AnswerQuestion")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FBirthday")
                        .HasColumnName("F_Birthday")
                        .HasColumnType("datetime");

                    b.Property<int?>("FCheckOnLine")
                        .HasColumnName("F_CheckOnLine");

                    b.Property<string>("FCompanyId")
                        .HasColumnName("F_CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDepartmentId")
                        .HasColumnName("F_DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmail")
                        .HasColumnName("F_Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FGender")
                        .HasColumnName("F_Gender");

                    b.Property<string>("FHeadIcon")
                        .HasColumnName("F_HeadIcon")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FLockEndDate")
                        .HasColumnName("F_LockEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FLockStartDate")
                        .HasColumnName("F_LockStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FMobile")
                        .HasColumnName("F_Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FMsn")
                        .HasColumnName("F_MSN")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNickName")
                        .HasColumnName("F_NickName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOicq")
                        .HasColumnName("F_OICQ")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FOpenId")
                        .HasColumnName("F_OpenId");

                    b.Property<string>("FPassword")
                        .HasColumnName("F_Password")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQuestion")
                        .HasColumnName("F_Question")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQuickQuery")
                        .HasColumnName("F_QuickQuery")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FRealName")
                        .HasColumnName("F_RealName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSecretkey")
                        .HasColumnName("F_Secretkey")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSecurityLevel")
                        .HasColumnName("F_SecurityLevel");

                    b.Property<string>("FSimpleSpelling")
                        .HasColumnName("F_SimpleSpelling")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FTelephone")
                        .HasColumnName("F_Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FWeChat")
                        .HasColumnName("F_WeChat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FUserId")
                        .HasName("PK_BASE_USER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_User");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrBaseUserRelation", b =>
                {
                    b.Property<string>("FUserRelationId")
                        .HasColumnName("F_UserRelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FCategory")
                        .HasColumnName("F_Category");

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FUserRelationId")
                        .HasName("PK_BASE_USERRELATION")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_Base_UserRelation");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmCashBalance", b =>
                {
                    b.Property<string>("FCashBalanceId")
                        .HasColumnName("F_CashBalanceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAbstract")
                        .HasColumnName("F_Abstract")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("FBalance")
                        .HasColumnName("F_Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FCashAccount")
                        .HasColumnName("F_CashAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FExecutionDate")
                        .HasColumnName("F_ExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FExpenses")
                        .HasColumnName("F_Expenses")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FReceivable")
                        .HasColumnName("F_Receivable")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FCashBalanceId")
                        .HasName("PK_Client_CashBalance");

                    b.ToTable("LR_CRM_CashBalance");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmChance", b =>
                {
                    b.Property<string>("FChanceId")
                        .HasColumnName("F_ChanceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FAlertDateTime")
                        .HasColumnName("F_AlertDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FAlertState")
                        .HasColumnName("F_AlertState");

                    b.Property<decimal?>("FAmount")
                        .HasColumnName("F_Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("FChanceState")
                        .HasColumnName("F_ChanceState");

                    b.Property<string>("FChanceTypeId")
                        .HasColumnName("F_ChanceTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCity")
                        .HasColumnName("F_City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyAddress")
                        .HasColumnName("F_CompanyAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyDesc")
                        .HasColumnName("F_CompanyDesc")
                        .IsUnicode(false);

                    b.Property<string>("FCompanyName")
                        .HasColumnName("F_CompanyName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyNatureId")
                        .HasColumnName("F_CompanyNatureId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanySite")
                        .HasColumnName("F_CompanySite")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContacts")
                        .HasColumnName("F_Contacts")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FDealDate")
                        .HasColumnName("F_DealDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmail")
                        .HasColumnName("F_Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFax")
                        .HasColumnName("F_Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FHobby")
                        .HasColumnName("F_Hobby")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FIsToCustom")
                        .HasColumnName("F_IsToCustom");

                    b.Property<string>("FMobile")
                        .HasColumnName("F_Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FProfit")
                        .HasColumnName("F_Profit")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("FProvince")
                        .HasColumnName("F_Province")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQq")
                        .HasColumnName("F_QQ")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FSaleCost")
                        .HasColumnName("F_SaleCost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FSourceId")
                        .HasColumnName("F_SourceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FStageId")
                        .HasColumnName("F_StageId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FSuccessRate")
                        .HasColumnName("F_SuccessRate")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("FTel")
                        .HasColumnName("F_Tel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FTraceUserId")
                        .HasColumnName("F_TraceUserId")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FTraceUserName")
                        .HasColumnName("F_TraceUserName")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FWechat")
                        .HasColumnName("F_Wechat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FChanceId")
                        .HasName("PK_CLIENT_CHANCE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_CRM_Chance");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmCustomer", b =>
                {
                    b.Property<string>("FCustomerId")
                        .HasColumnName("F_CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FAlertDateTime")
                        .HasColumnName("F_AlertDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FAlertState")
                        .HasColumnName("F_AlertState");

                    b.Property<string>("FCity")
                        .HasColumnName("F_City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyAddress")
                        .HasColumnName("F_CompanyAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyDesc")
                        .HasColumnName("F_CompanyDesc")
                        .IsUnicode(false);

                    b.Property<string>("FCompanySite")
                        .HasColumnName("F_CompanySite")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContact")
                        .HasColumnName("F_Contact")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustDegreeId")
                        .HasColumnName("F_CustDegreeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustIndustryId")
                        .HasColumnName("F_CustIndustryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustLevelId")
                        .HasColumnName("F_CustLevelId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustTypeId")
                        .HasColumnName("F_CustTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmail")
                        .HasColumnName("F_Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFax")
                        .HasColumnName("F_Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FHobby")
                        .HasColumnName("F_Hobby")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FLegalPerson")
                        .HasColumnName("F_LegalPerson")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FMobile")
                        .HasColumnName("F_Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProvince")
                        .HasColumnName("F_Province")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQq")
                        .HasColumnName("F_QQ")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FShortName")
                        .HasColumnName("F_ShortName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FTel")
                        .HasColumnName("F_Tel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FTraceUserId")
                        .HasColumnName("F_TraceUserId")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FTraceUserName")
                        .HasColumnName("F_TraceUserName")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FWechat")
                        .HasColumnName("F_Wechat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FCustomerId")
                        .HasName("PK_CLIENT_CUSTOMER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_CRM_Customer");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmCustomerContact", b =>
                {
                    b.Property<string>("FCustomerContactId")
                        .HasColumnName("F_CustomerContactId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContact")
                        .HasColumnName("F_Contact")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustomerId")
                        .HasColumnName("F_CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmail")
                        .HasColumnName("F_Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFax")
                        .HasColumnName("F_Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FGender")
                        .HasColumnName("F_Gender");

                    b.Property<string>("FHobby")
                        .HasColumnName("F_Hobby")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FMobile")
                        .HasColumnName("F_Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPostId")
                        .HasColumnName("F_PostId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FQq")
                        .HasColumnName("F_QQ")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FTel")
                        .HasColumnName("F_Tel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FWechat")
                        .HasColumnName("F_Wechat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FCustomerContactId")
                        .HasName("PK_CLIENT_CUSTOMERCONTACT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FCustomerId")
                        .HasName("Relationship_28_FK");

                    b.ToTable("LR_CRM_CustomerContact");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmExpenses", b =>
                {
                    b.Property<string>("FExpensesId")
                        .HasColumnName("F_ExpensesId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FExpensesAbstract")
                        .HasColumnName("F_ExpensesAbstract")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FExpensesAccount")
                        .HasColumnName("F_ExpensesAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FExpensesDate")
                        .HasColumnName("F_ExpensesDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FExpensesObject")
                        .HasColumnName("F_ExpensesObject");

                    b.Property<decimal?>("FExpensesPrice")
                        .HasColumnName("F_ExpensesPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FExpensesType")
                        .HasColumnName("F_ExpensesType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FManagers")
                        .HasColumnName("F_Managers")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FExpensesId")
                        .HasName("PK_Client_Expenses");

                    b.ToTable("LR_CRM_Expenses");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmInvoice", b =>
                {
                    b.Property<string>("FInvoiceId")
                        .HasColumnName("F_InvoiceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustomerCode")
                        .HasColumnName("F_CustomerCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustomerId")
                        .HasColumnName("F_CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustomerName")
                        .HasColumnName("F_CustomerName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FInvoiceContent")
                        .HasColumnName("F_InvoiceContent")
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FInvoiceId")
                        .HasName("PK_CLIENT_INVOICE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FCustomerId")
                        .HasName("Relationship_33_FK");

                    b.ToTable("LR_CRM_Invoice");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmOrder", b =>
                {
                    b.Property<string>("FOrderId")
                        .HasColumnName("F_OrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAbstractInfo")
                        .HasColumnName("F_AbstractInfo")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("FAccounts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("F_Accounts")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<string>("FContractCode")
                        .HasColumnName("F_ContractCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContractFile")
                        .HasColumnName("F_ContractFile")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCustomerId")
                        .HasColumnName("F_CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("FDiscountSum")
                        .HasColumnName("F_DiscountSum")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOrderCode")
                        .HasColumnName("F_OrderCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FOrderDate")
                        .HasColumnName("F_OrderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FPaymentDate")
                        .HasColumnName("F_PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FPaymentMode")
                        .HasColumnName("F_PaymentMode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FPaymentState")
                        .HasColumnName("F_PaymentState");

                    b.Property<decimal?>("FReceivedAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("F_ReceivedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal?>("FSaleCost")
                        .HasColumnName("F_SaleCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FSellerId")
                        .HasColumnName("F_SellerId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FOrderId")
                        .HasName("PK_CLIENT_ORDER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_CRM_Order");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmOrderProduct", b =>
                {
                    b.Property<string>("FOrderEntryId")
                        .HasColumnName("F_OrderEntryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FAmount")
                        .HasColumnName("F_Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FOrderId")
                        .HasColumnName("F_OrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FPrice")
                        .HasColumnName("F_Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FProductCode")
                        .HasColumnName("F_ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProductId")
                        .HasColumnName("F_ProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProductName")
                        .HasColumnName("F_ProductName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("FQty")
                        .HasColumnName("F_Qty")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<decimal?>("FTax")
                        .HasColumnName("F_Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("FTaxAmount")
                        .HasColumnName("F_TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("FTaxRate")
                        .HasColumnName("F_TaxRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("FTaxprice")
                        .HasColumnName("F_Taxprice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FUnitId")
                        .HasColumnName("F_UnitId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FOrderEntryId")
                        .HasName("PK_CLIENT_ORDERENTRY")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_CRM_OrderProduct");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmReceivable", b =>
                {
                    b.Property<string>("FReceivableId")
                        .HasColumnName("F_ReceivableId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FOrderId")
                        .HasColumnName("F_OrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPaymentAccount")
                        .HasColumnName("F_PaymentAccount")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPaymentMode")
                        .HasColumnName("F_PaymentMode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("FPaymentPrice")
                        .HasColumnName("F_PaymentPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("FPaymentTime")
                        .HasColumnName("F_PaymentTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FReceivableId")
                        .HasName("PK_CLIENT_RECEIVABLE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FOrderId")
                        .HasName("Relationship_34_FK");

                    b.ToTable("LR_CRM_Receivable");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrCrmTrailRecord", b =>
                {
                    b.Property<string>("FTrailId")
                        .HasColumnName("F_TrailId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FObjectSort")
                        .HasColumnName("F_ObjectSort");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FTrackContent")
                        .HasColumnName("F_TrackContent")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FTrackTypeId")
                        .HasColumnName("F_TrackTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FTrailId")
                        .HasName("PK_CLIENT_CHANCETRAIL")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_CRM_TrailRecord");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoBorrow", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FdataItem")
                        .HasColumnName("FDataItem")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FlowId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LR_Demo_Borrow");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoChenji", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Chenji");

                    b.Property<string>("Sid")
                        .HasColumnName("SID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Xueke")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LR_Demo_Chenji");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoFormLeave", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FBegin")
                        .HasColumnName("F_Begin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FEnd")
                        .HasColumnName("F_End")
                        .HasColumnType("datetime");

                    b.Property<string>("FFileId")
                        .HasColumnName("F_FileId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FNum")
                        .HasColumnName("F_Num");

                    b.Property<string>("FReason")
                        .HasColumnName("F_Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("FType")
                        .HasColumnName("F_Type");

                    b.Property<string>("FdataItem")
                        .HasColumnName("FDataItem")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK__LR_Demo___2C6EC7234336F4B9");

                    b.ToTable("LR_Demo_FormLeave");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoOrderList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("MeterialId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MeterialName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Qty");

                    b.Property<string>("UId")
                        .HasColumnName("U_ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LR_Demo_OrderList");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoSingle", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDes")
                        .HasColumnName("F_Des")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FType")
                        .HasColumnName("F_type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId");

                    b.ToTable("LR_Demo_Single");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoStudent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Fdepartment")
                        .HasColumnName("FDepartment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ffile")
                        .HasColumnName("FFile")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Fname")
                        .HasColumnName("FName")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Fsex")
                        .HasColumnName("FSex")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LR_Demo_Student");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Age")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Sex")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LR_Demo_User");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrDemoUserDes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Post")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UId")
                        .HasColumnName("U_ID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("LR_Demo_UserDes");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrExcelExport", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FBtnName")
                        .HasColumnName("F_BtnName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FGridId")
                        .HasColumnName("F_GridId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleBtnId")
                        .HasColumnName("F_ModuleBtnId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleId")
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_System_SetExcelExport");

                    b.ToTable("LR_Excel_Export");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrExcelImport", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FBtnName")
                        .HasColumnName("F_BtnName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDbId")
                        .HasColumnName("F_DbId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDbTable")
                        .HasColumnName("F_DbTable")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FErrorType")
                        .HasColumnName("F_ErrorType");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleBtnId")
                        .HasColumnName("F_ModuleBtnId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleId")
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_System_SetExcelImprot");

                    b.ToTable("LR_Excel_Import");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrExcelImportFileds", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FColName")
                        .HasColumnName("F_ColName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FDataItemCode")
                        .HasColumnName("F_DataItemCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDataSourceId")
                        .HasColumnName("F_DataSourceId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FImportId")
                        .HasColumnName("F_ImportId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FOnlyOne")
                        .HasColumnName("F_OnlyOne");

                    b.Property<int?>("FRelationType")
                        .HasColumnName("F_RelationType");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FValue")
                        .HasColumnName("F_Value")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_System_SetExcelImportFiled");

                    b.ToTable("LR_Excel_ImportFileds");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrFormRelation", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFormId")
                        .IsRequired()
                        .HasColumnName("F_FormId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModuleId")
                        .IsRequired()
                        .HasColumnName("F_ModuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSettingJson")
                        .HasColumnName("F_SettingJson")
                        .HasColumnType("text");

                    b.HasKey("FId")
                        .HasName("PK_Form_ModuleRelation");

                    b.ToTable("LR_Form_Relation");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrFormScheme", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FScheme")
                        .HasColumnName("F_Scheme")
                        .HasColumnType("text");

                    b.Property<string>("FSchemeInfoId")
                        .IsRequired()
                        .HasColumnName("F_SchemeInfoId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FType")
                        .HasColumnName("F_Type");

                    b.HasKey("FId");

                    b.ToTable("LR_Form_Scheme");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrFormSchemeInfo", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCategory")
                        .HasColumnName("F_Category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeId")
                        .HasColumnName("F_SchemeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FType")
                        .HasColumnName("F_Type");

                    b.Property<string>("FUrlAddress")
                        .HasColumnName("F_UrlAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_Form_Module");

                    b.ToTable("LR_Form_SchemeInfo");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrImContent", b =>
                {
                    b.Property<string>("FContentId")
                        .HasColumnName("F_ContentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FIsGroup")
                        .HasColumnName("F_IsGroup");

                    b.Property<string>("FMsgContent")
                        .HasColumnName("F_MsgContent")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FSendId")
                        .HasColumnName("F_SendId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FToId")
                        .HasColumnName("F_ToId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FContentId")
                        .HasName("PK_MSG_CONTENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_IM_Content");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrImGroup", b =>
                {
                    b.Property<string>("FGroupId")
                        .HasColumnName("F_GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FGroupId")
                        .HasName("PK_MSG_GROUP")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_IM_Group");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrImRead", b =>
                {
                    b.Property<string>("FReadId")
                        .HasColumnName("F_ReadId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContentId")
                        .HasColumnName("F_ContentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FReadStatus")
                        .HasColumnName("F_ReadStatus");

                    b.Property<string>("FSendId")
                        .HasColumnName("F_SendId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FReadId")
                        .HasName("PK_MSG_UNREAD")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_IM_Read");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrImUserGroup", b =>
                {
                    b.Property<string>("FUserGroupId")
                        .HasColumnName("F_UserGroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FGroupId")
                        .HasColumnName("F_GroupId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FUserGroupId")
                        .HasName("PK_MSG_USERGROUP")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_IM_UserGroup");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaEmailAddressee", b =>
                {
                    b.Property<string>("FAddresseeId")
                        .HasColumnName("F_AddresseeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FBacklog")
                        .HasColumnName("F_Backlog");

                    b.Property<string>("FCategoryId")
                        .HasColumnName("F_CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FContentId")
                        .HasColumnName("F_ContentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<int?>("FIsHighlight")
                        .HasColumnName("F_IsHighlight");

                    b.Property<int?>("FIsRead")
                        .HasColumnName("F_IsRead");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FReadCount")
                        .HasColumnName("F_ReadCount");

                    b.Property<DateTime?>("FReadDate")
                        .HasColumnName("F_ReadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FRecipientId")
                        .HasColumnName("F_RecipientId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FRecipientName")
                        .HasColumnName("F_RecipientName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FRecipientState")
                        .HasColumnName("F_RecipientState");

                    b.HasKey("FAddresseeId")
                        .HasName("PK_EMAIL_ADDRESSEE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_EmailAddressee");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaEmailCategory", b =>
                {
                    b.Property<string>("FCategoryId")
                        .HasColumnName("F_CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FCategoryId")
                        .HasName("PK_EMAIL_CATEGORY")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_EmailCategory");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaEmailContent", b =>
                {
                    b.Property<string>("FContentId")
                        .HasColumnName("F_ContentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAddresssHtml")
                        .HasColumnName("F_AddresssHtml")
                        .HasColumnType("text");

                    b.Property<string>("FBccsendHtml")
                        .HasColumnName("F_BccsendHtml")
                        .HasColumnType("text");

                    b.Property<string>("FCategoryId")
                        .HasColumnName("F_CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCopysendHtml")
                        .HasColumnName("F_CopysendHtml")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEmailContent")
                        .HasColumnName("F_EmailContent")
                        .HasColumnType("text");

                    b.Property<int?>("FEmailType")
                        .HasColumnName("F_EmailType");

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFiles")
                        .HasColumnName("F_Files")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("FIsHighlight")
                        .HasColumnName("F_IsHighlight");

                    b.Property<int?>("FIsReceipt")
                        .HasColumnName("F_IsReceipt");

                    b.Property<int?>("FIsSmsReminder")
                        .HasColumnName("F_IsSmsReminder");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSendPriority")
                        .HasColumnName("F_SendPriority")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FSendState")
                        .HasColumnName("F_SendState");

                    b.Property<string>("FSenderId")
                        .HasColumnName("F_SenderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSenderName")
                        .HasColumnName("F_SenderName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FSenderTime")
                        .HasColumnName("F_SenderTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FTheme")
                        .HasColumnName("F_Theme")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FThemeColor")
                        .HasColumnName("F_ThemeColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FContentId")
                        .HasName("PK_EMAIL_CONTENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_EmailContent");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaFileFolder", b =>
                {
                    b.Property<string>("FFolderId")
                        .HasColumnName("F_FolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFolderName")
                        .HasColumnName("F_FolderName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FFolderType")
                        .HasColumnName("F_FolderType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FIsShare")
                        .HasColumnName("F_IsShare");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParentId")
                        .HasColumnName("F_ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FShareCode")
                        .HasColumnName("F_ShareCode");

                    b.Property<string>("FShareLink")
                        .HasColumnName("F_ShareLink")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FShareTime")
                        .HasColumnName("F_ShareTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FFolderId")
                        .HasName("PK_FILE_FOLDER")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_FileFolder");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaFileInfo", b =>
                {
                    b.Property<string>("FFileId")
                        .HasColumnName("F_FileId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FDownloadCount")
                        .HasColumnName("F_DownloadCount");

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFileExtensions")
                        .HasColumnName("F_FileExtensions")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFileName")
                        .HasColumnName("F_FileName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FFilePath")
                        .HasColumnName("F_FilePath")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FFileSize")
                        .HasColumnName("F_FileSize")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFileType")
                        .HasColumnName("F_FileType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFolderId")
                        .HasColumnName("F_FolderId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FIsShare")
                        .HasColumnName("F_IsShare");

                    b.Property<int?>("FIsTop")
                        .HasColumnName("F_IsTop");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FShareCode")
                        .HasColumnName("F_ShareCode");

                    b.Property<string>("FShareLink")
                        .HasColumnName("F_ShareLink")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FShareTime")
                        .HasColumnName("F_ShareTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.HasKey("FFileId")
                        .HasName("PK_FILE_DOCUMENT")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_FileInfo");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaNews", b =>
                {
                    b.Property<string>("FNewsId")
                        .HasColumnName("F_NewsId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAuthorName")
                        .HasColumnName("F_AuthorName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FBriefHead")
                        .HasColumnName("F_BriefHead")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCategory")
                        .HasColumnName("F_Category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCategoryId")
                        .HasColumnName("F_CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompileName")
                        .HasColumnName("F_CompileName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFullHead")
                        .HasColumnName("F_FullHead")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FFullHeadColor")
                        .HasColumnName("F_FullHeadColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FKeyword")
                        .HasColumnName("F_Keyword")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNewsContent")
                        .HasColumnName("F_NewsContent")
                        .HasColumnType("text");

                    b.Property<int?>("FPv")
                        .HasColumnName("F_PV");

                    b.Property<DateTime?>("FReleaseTime")
                        .HasColumnName("F_ReleaseTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FSourceAddress")
                        .HasColumnName("F_SourceAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSourceName")
                        .HasColumnName("F_SourceName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FTagWord")
                        .HasColumnName("F_TagWord")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FTypeId")
                        .HasColumnName("F_TypeId");

                    b.HasKey("FNewsId")
                        .HasName("PK_BASE_NEWS")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_News");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrOaSchedule", b =>
                {
                    b.Property<string>("FScheduleId")
                        .HasColumnName("F_ScheduleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCategory")
                        .HasColumnName("F_Category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FEarly")
                        .HasColumnName("F_Early");

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FEndDate")
                        .HasColumnName("F_EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FEndTime")
                        .HasColumnName("F_EndTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FIsMailAlert")
                        .HasColumnName("F_IsMailAlert");

                    b.Property<int?>("FIsMobileAlert")
                        .HasColumnName("F_IsMobileAlert");

                    b.Property<int?>("FIsWeChatAlert")
                        .HasColumnName("F_IsWeChatAlert");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FScheduleContent")
                        .HasColumnName("F_ScheduleContent")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FScheduleName")
                        .HasColumnName("F_ScheduleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FScheduleState")
                        .HasColumnName("F_ScheduleState");

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<DateTime?>("FStartDate")
                        .HasColumnName("F_StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FStartTime")
                        .HasColumnName("F_StartTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FScheduleId")
                        .HasName("PK_BASE_SCHEDULE")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_OA_Schedule");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrReportTemp", b =>
                {
                    b.Property<string>("FTempId")
                        .HasColumnName("F_TempId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FEnCode")
                        .HasColumnName("F_EnCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<string>("FFullName")
                        .HasColumnName("F_FullName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FParamJson")
                        .HasColumnName("F_ParamJson")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("FSortCode")
                        .HasColumnName("F_SortCode");

                    b.Property<string>("FTempCategory")
                        .HasColumnName("F_TempCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FTempStyle")
                        .HasColumnName("F_TempStyle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FTempType")
                        .HasColumnName("F_TempType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FTempId")
                        .HasName("PK_RPT_TEMP")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_ReportTemp");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWeChatDeptRelation", b =>
                {
                    b.Property<string>("FDeptRelationId")
                        .HasColumnName("F_DeptRelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDeptId")
                        .HasColumnName("F_DeptId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDeptName")
                        .HasColumnName("F_DeptName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FWeChatDeptId")
                        .HasColumnName("F_WeChatDeptId");

                    b.HasKey("FDeptRelationId")
                        .HasName("PK_WECHAT_DEPTRELATION")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_WeChat_DeptRelation");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWeChatUserRelation", b =>
                {
                    b.Property<string>("FUserRelationId")
                        .HasColumnName("F_UserRelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDeptId")
                        .HasColumnName("F_DeptId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDeptName")
                        .HasColumnName("F_DeptName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSyncLog")
                        .HasColumnName("F_SyncLog")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FSyncState")
                        .HasColumnName("F_SyncState")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FUserId")
                        .HasColumnName("F_UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FWeChatDeptId")
                        .HasColumnName("F_WeChatDeptId");

                    b.HasKey("FUserRelationId")
                        .HasName("PK_WeChat_UserRelation");

                    b.ToTable("LR_WeChat_UserRelation");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfConfluence", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFormNodeId")
                        .HasColumnName("F_FormNodeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FIsOk")
                        .HasColumnName("F_IsOk");

                    b.Property<string>("FNodeId")
                        .HasColumnName("F_NodeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProcessId")
                        .HasColumnName("F_ProcessId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_LR_Workflow_Confluence");

                    b.ToTable("LR_WF_Confluence");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfDelegateRecord", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FFromUserId")
                        .HasColumnName("F_FromUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FFromUserName")
                        .HasColumnName("F_FromUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProcessCode")
                        .HasColumnName("F_ProcessCode")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FProcessId")
                        .HasColumnName("F_ProcessId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProcessName")
                        .HasColumnName("F_ProcessName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FToUserId")
                        .HasColumnName("F_ToUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FToUserName")
                        .HasColumnName("F_ToUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FWfdelegateRuleId")
                        .IsRequired()
                        .HasColumnName("F_WFDelegateRuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_WF_DelegateRecord");

                    b.ToTable("LR_WF_DelegateRecord");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfDelegateRule", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FBeginDate")
                        .HasColumnName("F_BeginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<DateTime?>("FEndDate")
                        .HasColumnName("F_EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FToUserId")
                        .HasColumnName("F_ToUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FToUserName")
                        .HasColumnName("F_ToUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_WF_DelegateRule");

                    b.ToTable("LR_WF_DelegateRule");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfDelegateRuleRelation", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDelegateRuleId")
                        .HasColumnName("F_DelegateRuleId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeInfoId")
                        .HasColumnName("F_SchemeInfoId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_LR_Workflow_DelegateRuleSchemeInfo");

                    b.ToTable("LR_WF_DelegateRuleRelation");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfProcessInstance", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyId")
                        .HasColumnName("F_CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .IsRequired()
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .IsRequired()
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDepartmentId")
                        .HasColumnName("F_DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FIsAgain")
                        .HasColumnName("F_IsAgain");

                    b.Property<int?>("FIsChildFlow")
                        .HasColumnName("F_IsChildFlow");

                    b.Property<int?>("FIsFinished")
                        .HasColumnName("F_IsFinished");

                    b.Property<int?>("FProcessLevel")
                        .HasColumnName("F_ProcessLevel");

                    b.Property<string>("FProcessName")
                        .HasColumnName("F_ProcessName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FProcessParentId")
                        .HasColumnName("F_ProcessParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeCode")
                        .HasColumnName("F_SchemeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeId")
                        .HasColumnName("F_SchemeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeName")
                        .HasColumnName("F_SchemeName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK__WF_ProcessInstan__3B40CD36");

                    b.ToTable("LR_WF_ProcessInstance");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfScheme", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FScheme")
                        .HasColumnName("F_Scheme")
                        .HasColumnType("text");

                    b.Property<string>("FSchemeInfoId")
                        .HasColumnName("F_SchemeInfoId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FType")
                        .HasColumnName("F_Type");

                    b.HasKey("FId")
                        .HasName("PK_LR_Workflow_Scheme");

                    b.ToTable("LR_WF_Scheme");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfSchemeAuthorize", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectId")
                        .HasColumnName("F_ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FObjectName")
                        .HasColumnName("F_ObjectName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("FObjectType")
                        .HasColumnName("F_ObjectType");

                    b.Property<string>("FSchemeInfoId")
                        .HasColumnName("F_SchemeInfoId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK_LR_Workflow_SchemeAuthorize");

                    b.ToTable("LR_WF_SchemeAuthorize");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfSchemeInfo", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCategory")
                        .HasColumnName("F_Category")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCode")
                        .HasColumnName("F_Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("FDeleteMark")
                        .HasColumnName("F_DeleteMark");

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("FEnabledMark")
                        .HasColumnName("F_EnabledMark");

                    b.Property<int?>("FIsApp")
                        .HasColumnName("F_IsApp");

                    b.Property<int?>("FKind")
                        .HasColumnName("F_Kind");

                    b.Property<string>("FName")
                        .HasColumnName("F_Name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FSchemeId")
                        .HasColumnName("F_SchemeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FId")
                        .HasName("PK__LR_Workf__2C6EC72261BB7BD9")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LR_WF_SchemeInfo");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfTask", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAuditorId")
                        .HasColumnName("F_AuditorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FAuditorName")
                        .HasColumnName("F_AuditorName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCompanyId")
                        .HasColumnName("F_CompanyId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDepartmentId")
                        .HasColumnName("F_DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FIsFinished")
                        .HasColumnName("F_IsFinished");

                    b.Property<DateTime?>("FModifyDate")
                        .HasColumnName("F_ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FModifyUserId")
                        .HasColumnName("F_ModifyUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FModifyUserName")
                        .HasColumnName("F_ModifyUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNodeId")
                        .HasColumnName("F_NodeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNodeName")
                        .HasColumnName("F_NodeName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FPreviousId")
                        .HasColumnName("F_PreviousId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPreviousName")
                        .HasColumnName("F_PreviousName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProcessId")
                        .HasColumnName("F_ProcessId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FTaskType")
                        .HasColumnName("F_TaskType");

                    b.Property<int?>("FTimeoutAction")
                        .HasColumnName("F_TimeoutAction");

                    b.Property<int?>("FTimeoutNotice")
                        .HasColumnName("F_TimeoutNotice");

                    b.HasKey("FId")
                        .HasName("PK_LR_Workflow_Task");

                    b.ToTable("LR_WF_Task");
                });

            modelBuilder.Entity("OTTMRPDB.Models.LrWfTaskHistory", b =>
                {
                    b.Property<string>("FId")
                        .HasColumnName("F_Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FCreateDate")
                        .HasColumnName("F_CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FCreateUserId")
                        .HasColumnName("F_CreateUserId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FCreateUserName")
                        .HasColumnName("F_CreateUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FDescription")
                        .HasColumnName("F_Description")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FNodeId")
                        .HasColumnName("F_NodeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FNodeName")
                        .HasColumnName("F_NodeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPreviousId")
                        .HasColumnName("F_PreviousId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FPreviousName")
                        .HasColumnName("F_PreviousName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FProcessId")
                        .HasColumnName("F_ProcessId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FResult")
                        .HasColumnName("F_Result");

                    b.Property<int?>("FTaskType")
                        .HasColumnName("F_TaskType");

                    b.HasKey("FId")
                        .HasName("PK_LR_Workflow_TaskHistory");

                    b.ToTable("LR_WF_TaskHistory");
                });

            modelBuilder.Entity("OTTMRPDB.Models.NetAdminauthorization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ModifyUser")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("MoidfyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NetId")
                        .HasColumnName("netId")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("RoleId")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("net_adminauthorization");
                });

            modelBuilder.Entity("OTTMRPDB.Models.NetAdmindb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DbIpaddress")
                        .HasColumnName("DB_IPAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("DbPort")
                        .HasColumnName("DB_Port")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DbRemark")
                        .HasColumnName("DB_Remark")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DbUserName")
                        .HasColumnName("DB_UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DbUserPassword")
                        .HasColumnName("DB_UserPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Pid")
                        .HasColumnName("PID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("net_admindb");
                });
#pragma warning restore 612, 618
        }
    }
}
